default_platform(:ios)

platform :ios do
  desc "Installs the certificates locally"
  private_lane :install_certificates do
    tmp_keychain = "temporary_keychain"
    
    create_keychain(
      name: tmp_keychain,
      password: tmp_keychain,
      default_keychain: true,
      lock_when_sleeps: true,
      timeout: 3600,
      unlock: true,
      verbose: true
    )
    
    unlock_keychain(
      path: tmp_keychain,
      password: tmp_keychain,
      add_to_search_list: :replace
    )
    
    match(
      type: "appstore",
      keychain_name: tmp_keychain,
      keychain_password: tmp_keychain,
      app_identifier:  "Oleksandr-Kysil.Mu-Origin-Calculator",
      readonly: false,
      verbose: true
    )
  end
  # desc "Local Machine - create TestFlight build."
  # lane :local_appstore do
  #   begin
  #     # retrieve build number
  #     buildNumber = get_info_plist_value(
  #       path: "Mu Origin Calculator/Info.plist",
  #       key: "CFBundleVersion"
  #     )
  #
  #     versionNumber = get_version_number(target: "Mu Origin Calculator")
  #
  #     # create keychain
  #     keychainName = "Travis Keychain"
  #     keychainPassword = SecureRandom.base64
  #
  #     ENV["MATCH_KEYCHAIN_NAME"] = keychainName
  #     ENV["MATCH_KEYCHAIN_PASSWORD"] = keychainPassword
  #
  #     create_keychain(
  #       name: keychainName,
  #       default_keychain: true,
  #       unlock: true,
  #       timeout: 3600,
  #       password: keychainPassword,
  #         verbose: true
  #     )
  #
  #     # fetch provisioning profile
  #     match(
  #       type: "development",
  #       readonly: true,
  #       app_identifier: "Oleksandr-Kysil.Mu-Origin-Calculator",
  #         verbose: true
  #     )
  #
  #     # archive build
  #     build_ios_app(
  #       configuration: "Development",
  #       scheme: "Mu Origin Calculator",
  #       clean: true,
  #       export_method: "development",
  #       output_directory: "./builds/appstore/#{versionNumber}.#{buildNumber}",
  #       output_name: "ios_fastlane_integration.ipa"
  #     )
  #
  #     # submit to App Center
  #     appcenter_upload(
  #       api_token: "#{ENV["APP_CENTER_API_TOKEN"]}",
  #       owner_name: "{{owner_name}}}",
  #       app_name: "{{app_name}}",
  #       ipa: "./builds/dev/#{versionNumber}.#{buildNumber}/ios_fastlane_integration.ipa",
  #       destinations: "*",
  #       notify_testers: true,
  #       release_notes: "BuildNumber: #{buildNumber}"
  #     )
  #
  #     # upload to Testflight
  #     upload_to_testflight(
  #       apple_id: "1305862853",
  #       ipa: "./builds/appstore/#{versionNumber}.#{buildNumber}/ios_fastlane_integration.ipa",
  #       skip_waiting_for_build_processing: true,
  #       skip_submission: true
  #     )
  #
  #     # delete keychain
  #     delete_keychain(
  #       name: keychainName
  #     )
  #
  #     rescue => exception
  #       puts exception
  #     end
  # end
  
  desc "Local Machine - create TestFlight build."
    # before_all do
    #   setEnvironmentVariable
    # end
  
    lane :local_appstore do
      begin
        
        install_certificates

        buildNumber = get_info_plist_value(
          path: "Mu Origin Calculator/Info.plist",
          key: "CFBundleVersion"
        )

        # fetch provisioning profile
        # match(
        #   type: "appstore",
        #   readonly: true,
        #   app_identifier: "Oleksandr-Kysil.Mu-Origin-Calculator",
        #   verbose: true
        # )
        
        versionNumber = get_version_number()
        # increment_version_number(version_number: versionNumber)
        # increment_version_number()
        # versionNumber = get_version_number()
        
        increment_build_number(build_number: buildNumber.to_i + 1)

        # archive build
        build_ios_app(
          configuration: "App Store",
          scheme: "Mu Origin Calculator",
          clean: true,
          export_method: "app-store",
          output_directory: "./builds/appstore/#{versionNumber}.#{buildNumber}",
          output_name: "ios_fastlane_integration.ipa"
        )

        # upload to Testflight
        upload_to_testflight(
          apple_id: "1305862853",
          ipa: "./builds/appstore/#{versionNumber}.#{buildNumber}/ios_fastlane_integration.ipa",
          skip_waiting_for_build_processing: true,
          skip_submission: true
        )

      rescue => exception
        puts exception
      end
      
      # Commit version
      after_all do
        commit_version_bump
      end
      
    end
end
